AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  AcmCertificateArn:
    Type: String
    Description: the Amazon Resource Name (ARN) of an AWS Certificate Manager (ACM) certificate.
    AllowedPattern: "arn:aws:acm:.*"
  VpcId:
    Type: String
  Subnet1:
    Type: String
  Subnet2:
    Type: String
  ApplicationLoadBalancerSecurityGroup:
    Type: String
  S3Bucket:
    Type: String
  ConfigS3Bucket:
    Type: String
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    ConstraintDescription: must be a valid EC2 instance type.
  InstanceAMI:
    Description: Managed AMI ID for EC2 Instance
    Type: String
    Default: ami-0de53d8956e8dcf80
  DBHost:
    Type: String
  DBName:
    Type: String
  InstanceSecurityGroup:
    Type: String
  SecretId:
    Type: String
Resources:
  AppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        - !Ref ApplicationLoadBalancerSecurityGroup
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      Type: application
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref VpcId
      HealthCheckIntervalSeconds: 6
      HealthCheckTimeoutSeconds: 5
  AppListener443:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref AcmCertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 443
      Protocol: HTTPS
  AppListener80:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref AppLoadBalancer
      Port: 80
      Protocol: HTTP
  AutoScaling:
    Type: AWS::AutoScaling::AutoScalingGroup
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: 0
        MinSuccessfulInstancesPercent: 100
        PauseTime: PT5M
        WaitOnResourceSignals: true
    Properties:
      LaunchConfigurationName: !Ref LaunchConfig
      MaxSize: 1
      MinSize: 0
      DesiredCapacity: 1
      TargetGroupARNs:
        - !Ref TargetGroup
      VPCZoneIdentifier:
        - !Ref Subnet1
        - !Ref Subnet2
  LaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          All:
            - ConfigureSampleApp
        ConfigureSampleApp:
          files:
            /var/www/html/phpinfo.php:
              content: !Join
                - |+
                - - <?php phpinfo(); ?>
              mode: '000644'
              owner: root
              group: root
            /var/www/html/wp-cli.yml:
              content: |
                apache_modules:
                  - mod_rewrite
              mode: '000644'
              owner: root
              group: root
            /var/www/html/.htaccess:
              content: |
                # BEGIN WordPress
                <IfModule mod_rewrite.c>
                RewriteEngine On
                RewriteBase /
                RewriteRule ^index\.php$ - [L]
                RewriteCond %{REQUEST_FILENAME} !-f
                RewriteCond %{REQUEST_FILENAME} !-d
                RewriteRule . /index.php [L]
                </IfModule>
                # END WordPress
              mode: '000644'
              owner: root
              group: root
            /var/www/html/salts.php:
              content: |
                if($_SERVER['HTTP_X_FORWARDED_PROTO'] && $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https'){
                    $_SERVER['HTTPS'] = 'on';
                    $_SERVER['SERVER_PORT'] = 443;
                }
                //define('FORCE_SSL_ADMIN', true);
                define('AUTH_KEY',         ',Ah~6^oi4P9S_X!8PG7?b{$JIb*KY-Go9~^*zRIc(DA0!PXU7xXKsdd:/E?qrU_Z');
                define('SECURE_AUTH_KEY',  '>Oy.LfN03ytR@1@E.JV7KTiYe@9;v,(Z_Cm#O+_0W_<dkUIQU[tVXq/QuNy,~<82');
                define('LOGGED_IN_KEY',    '2cwnNko{OU9t7]PF2++H]mSJv8fwo Op)~GilpB~.4*1x<sfrmzCr[-Pp&6Sx=Lr');
                define('NONCE_KEY',        'Aw1|gP8vx!8w/(i*-5q-=+QPFS^;A|I+&joGpS}B:)zOB~{I^zuupfB_kW 7r9Wy');
                define('AUTH_SALT',        '*OgZkZ,Wn|&-c@t;1[p<(G*FkC5.-Q<AaYX}4B{BKgN~r8BGVXLa$tw.0&gS;h,a');
                define('SECURE_AUTH_SALT', 'Ciy/+xNE)1MAI#CG@Gt7O3>f,jXx6=19^K5;^#H&aK+z>po(CPf#8~];3MEL+:uv');
                define('LOGGED_IN_SALT',   'J=`?kW3iC#kQAOY-X~L2a2L?vn{*M0_4=D_#q&m,e-:AT1Xev0J5&R78X7ck0alE');
                define('NONCE_SALT',       '>R3YG/R|PD2W^#a7Lo`Kz:m9BX -o^?;mee)tYeTFuVYz.%yx0R@7)c9?8e1-P+-');
              mode: '000644'
              owner: root
              group: root
    Properties:
      IamInstanceProfile: !Ref WebsiteGeneratorInstanceProfileInstanceProfile
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      InstanceType:
        Ref: InstanceType
      KeyName:
        Ref: KeyName
      ImageId:
        Ref: InstanceAMI
      UserData:
        Fn::Base64:
          Fn::Join:
            - "\n"
            - - !Sub |
                #!/bin/bash -xe

                yum install -y aws-cfn-bootstrap
              - Fn::Join:
                  - ""
                  - - |
                      # Install the files and packages from the metadata
                      # also set up all of the other cloudformation vars we depend on
                    - '/opt/aws/bin/cfn-init -v '
                    - '         --stack '
                    - !Ref 'AWS::StackName'
                    - '         --resource LaunchConfig '
                    - '         --configsets All '
                    - '         --region '
                    - !Ref 'AWS::Region'
              - !Sub |+
                amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
                yum install -y httpd mysql jq
                systemctl start httpd
                systemctl enable httpd
                usermod -a -G apache ec2-user
                yum -y install gcc libstdc++-devel gcc-c++ fuse fuse-devel curl-devel libxml2-devel mailcap git automake make
                yum -y install openssl-devel # See (*2)
                cd ~
                git clone https://github.com/s3fs-fuse/s3fs-fuse
                cd s3fs-fuse/
                ./autogen.sh
                export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
                ./configure --prefix=/usr --with-openssl # See (*1)
                make
                make install
                export AWS_DEFAULT_REGION=${AWS::Region}
                DatabasePassword=$(aws secretsmanager get-secret-value --secret-id MyRDSSecret-agbqIEwPHGNa | jq -r '.SecretString' | jq -r '.password')
                DatabaseUser=$(aws secretsmanager get-secret-value --secret-id MyRDSSecret-agbqIEwPHGNa | jq -r '.SecretString' | jq -r '.username')

                curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
                chmod +x wp-cli.phar
                sudo mv wp-cli.phar /usr/local/bin/wp
                cd /var/www/html
                /usr/local/bin/wp core download --allow-root
                cat salts.php | /usr/local/bin/wp config create --allow-root --skip-salts --dbname=${DBName} --dbuser=$DatabaseUser --dbpass=$DatabasePassword --dbhost=${DBHost} --extra-php
                if $(wp core is-installed --allow-root); then
                    # load file from s3 bucket
                    aws s3 cp s3://${ConfigS3Bucket}/plugins .
                    aws s3 cp s3://${ConfigS3Bucket}/themes .
                    while read p; do
                      /usr/local/bin/wp plugin install $p --activate --allow-root
                    done <plugins
                    while read p; do
                       /usr/local/bin/wp theme install $p --activate --allow-root
                     done <themes
                    #/usr/local/bin/wp plugin install header-and-footer-scripts-inserter --activate --allow-root
                    #/usr/local/bin/wp plugin install insert-html-snippet --activate --allow-root
                    #/usr/local/bin/wp plugin install simply-static --activate --allow-root
                    #/usr/local/bin/wp plugin install themeisle-companion --activate --allow-root
                    #/usr/local/bin/wp theme install hestia --activate --allow-root

                    /usr/local/bin/wp plugin delete hello --allow-root
                    /usr/local/bin/wp plugin delete akismet --allow-root
                    /usr/local/bin/wp theme delete twentysixteen --allow-root
                    /usr/local/bin/wp theme delete twentyseventeen --allow-root
                    /usr/local/bin/wp theme delete twentynineteen --allow-root
                fi

                chown -R apache:apache /var/www
                chmod 775 /var/www && find /var/www -type d -exec chmod 775 {} \;
                find /var/www -type f -exec  chmod 0775 {} \;
                mkdir /var/www/html_static

                /usr/bin/s3fs ${S3Bucket} /var/www/html_static -o use_path_request_style,iam_role,allow_other,uid=0048,gid=0048
                mkdir /var/www/html/wp-content/uploads
                /usr/bin/s3fs ${DynamicS3Bucket} /var/www/html/wp-content/uploads -o use_path_request_style,iam_role,allow_other,uid=0048,gid=0048
                sed -i 's/AllowOverride None/AllowOverride All/g' /etc/httpd/conf/httpd.conf
                service httpd restart
                /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource AutoScaling --region ${AWS::Region}

  DynamicS3Bucket:
    Type: AWS::S3::Bucket
  WebsiteGeneratorInstanceProfileInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - Ref: WebsiteGeneratorInstanceProfileRole
  WebsiteGeneratorInstanceProfilePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: WebsiteGeneratorInstanceProfilePolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - s3:*
            Resource: !Sub "arn:aws:s3:::${ConfigS3Bucket}/*"
          - Effect: Allow
            Action:
              - s3:*
            Resource: !Sub "arn:aws:s3:::${ConfigS3Bucket}"
          - Effect: Allow
            Action:
              - s3:*
            Resource: !Sub "arn:aws:s3:::${S3Bucket}/*"
          - Effect: Allow
            Action:
              - s3:*
            Resource: !Sub "arn:aws:s3:::${S3Bucket}"
          - Effect: Allow
            Action:
              - s3:*
            Resource: !Sub "arn:aws:s3:::${DynamicS3Bucket}/*"
          - Effect: Allow
            Action:
              - s3:*
            Resource: !Sub "arn:aws:s3:::${DynamicS3Bucket}"
          - Effect: Allow
            Action:
              - ssm:*
              - ec2messages:*
            Resource: "*"
          - Effect: Allow
            Action:
              - kms:*
            Resource: "*"
          - Action:
              - cloudformation:DescribeStackResource
              - cloudformation:SignalResource
            Effect: Allow
            Resource:
              Fn::Sub: ${AWS::StackId}/*
          - Action:
              - cloudformation:DescribeStackResource
              - cloudformation:SignalResource
            Effect: Allow
            Resource:
              Fn::Sub: ${AWS::StackId}
          - Effect: Allow
            Action: secretsmanager:GetSecretValue
            Resource: !Sub "${SecretId}"
      Roles:
        - Ref: WebsiteGeneratorInstanceProfileRole
  WebsiteGeneratorInstanceProfileRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
Outputs:
  LoadBalancerZone:
    Value: !GetAtt AppLoadBalancer.CanonicalHostedZoneID
  LoadBalancerDomain:
    Value: !GetAtt AppLoadBalancer.DNSName
